name: CI

# yamllint disable-line rule:truthy
on:
  push:
    branches:
      - master
  pull_request:
    types:
      - opened
      - reopened
      - synchronize
  workflow_dispatch:

concurrency:
  group: ${{ github.head_ref || github.ref }}
  cancel-in-progress: true

jobs:
  lint-eslint:
    name: 👕 ESLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🏗 Set up Node.js
        uses: actions/setup-node@v2.4.1
        with:
          node-version: 16.x
          cache: yarn
      - name: 🏗 Install linux dependencies
        run: |
          sudo apt update
          sudo apt install libavahi-compat-libdnssd-dev libxtst-dev libpng++-dev libxext-dev libxss-dev
      - name: ⤵️ Install dependencies
        run: |
          yarn install
        env:
          CI: true
      - name: 🚀 Run ESLint
        run: |
          npx eslint
  lint-jsonlint:
    name: 👕 JSONLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🚀 Run JSONLint
        run: |
          sudo apt install -y jsonlint
          for file in $(find ./ -type f -name "*.json"); do
            if ! jsonlint-php -q $file; then
              export FAILED=1
            else
              echo "$file OK"
            fi
          done
          if [ "${FAILED}" = "1" ]; then
            exit 1
          fi
  lint-markdownlint:
    name: 👕 MarkdownLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🚀 Run mdl
        uses: actionshub/markdownlint@2.0.2
  lint-markdown-links:
    name: 👕 Markdown Link Check
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🚀 Run Markdown Links
        uses: gaurav-nelson/github-action-markdown-link-check@1.0.13
        with:
          use-quiet-mode: no
          use-verbose-mode: no
          config-file: mlc_config.json
          folder-path: .github
          file-path: ./README.md
          max-depth: -1
          check-modified-files-only: no
          base-branch: master
          file-extension: .md
  lint-prettier:
    name: 👕 Prettier
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🚀 Run Prettier
        uses: creyD/prettier_action@v4.1
        with:
          prettier_options: --write **/*.{js,json,ts,tsx,yml,yaml}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  lint-yamllint:
    name: 👕 YAMLLint
    runs-on: ubuntu-latest
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🚀 Run YAMLLint
        uses: ibiqlik/action-yamllint@v3.1
        with:
          file_or_dir: .
          config_file: .yamllint.yml
          format: colored
          strict: false
  build-app:
    name: 🚀 Build Application
    runs-on: ${{ matrix.os.server }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - name: windows
            server: windows-latest
            platform: win32
          - name: linux
            server: ubuntu-latest
            platform: linux
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          clean: ${{ matrix.os.server != 'self-hosted' }}
          ref: ${{ github.head_ref }}
      - name: 🏗 Set up Node.js
        if: matrix.os.server != 'self-hosted'
        uses: actions/setup-node@v2.4.1
        with:
          node-version: 16.x
          cache: yarn
      - name: 🏗 Install dependencies
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          yarn install
      - name: 🚀 Build
        run: |
          yarn build
        env:
          NODE_ENV: production
          INLINE_RUNTIME_CHUNK: false
      - name: ⬆ Upload Artifacts - Output
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.os.name }}-build
          path: build
  build-container:
    name: 🚀 Build Container - ${{ matrix.architecture }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        architecture:
          - amd64
    steps:
      - name: ⤵️ Check out code from GitHub
        uses: actions/checkout@v2.3.4
        with:
          ref: ${{ github.head_ref }}
      - name: 🏗 Set up build cache
        id: cache
        uses: actions/cache@v2.1.6
        with:
          path: /tmp/.docker-cache
          key: docker-${{ github.ref }}-${{ matrix.architecture }}-${{ github.sha }}
          restore-keys: |
            docker-${{ github.ref }}-${{ matrix.architecture }}
      - name: 🏗 Set up QEMU
        uses: docker/setup-qemu-action@v1.2.0
      - name: 🏗 Set up Docker Buildx
        uses: docker/setup-buildx-action@v1.6.0
      - name: ℹ️ Compose build flags
        id: flags
        run: |
          echo "::set-output name=date::$(date +"%Y-%m-%dT%H:%M:%SZ")"
          from=$(jq --raw-output ".build_from.${{ matrix.architecture }}" "build.json")
          echo "::set-output name=from::${from}"
          if [[ "${{ matrix.architecture}}" = "amd64" ]]; then
            echo "::set-output name=platform::linux/amd64"
          else
            echo "::error ::Could not determine platform for architecture ${{ matrix.architecture }}"
            exit 1
          fi
      - name: 🚀 Build
        uses: docker/build-push-action@v3.3.0
        with:
          push: false
          context: .
          file: Dockerfile
          cache-from: |
            type=local,src=/tmp/.docker-cache
            ghcr.io/timmo001/ip-frontend/${{ matrix.architecture }}:edge
          cache-to: type=local,mode=max,dest=/tmp/.docker-cache
          platforms: ${{ steps.flags.outputs.platform }}
          build-args: |
            BUILD_ARCH=${{ matrix.architecture }}
            BUILD_DATE=${{ steps.flags.outputs.date }}
            BUILD_FROM=${{ steps.flags.outputs.from }}
            BUILD_REF=${{ github.sha }}
            BUILD_REPOSITORY=${{ github.repository }}
            BUILD_VERSION=edge
